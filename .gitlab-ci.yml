image: openjdk:8-jdk

variables:
  ANDROID_COMPILE_SDK: "29"
  ANDROID_BUILD_TOOLS: "29.0.3"
  ANDROID_SDK_TOOLS:   "4333796"

stages:
  - build
  - test

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/
    - .android/build-cache/
    - android-sdk-linux/

before_script:
  - echo `pwd` # debug
  - echo "$CI_BUILD_NAME, $CI_BUILD_REF_NAME $CI_BUILD_STAGE" # debug
#  - export GRADLE_USER_HOME=`pwd`/.gradle
#  - rm -f  .gradle/caches/modules-2/modules-2.lock
#  - rm -fr .gradle/caches/*/plugin-resolution/
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
  - test -d "android-sdk-linux" && echo "SDK Found" || (wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip && unzip -d -u android-sdk-linux android-sdk.zip)
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  - chmod +x ./gradlew
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
  - set -o pipefail

lintDebug:
  stage: build
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint

assembleDebug:
  stage: build
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths:
    - app/build/outputs/
    expire_in: 10 week

debugUnitTests:
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:testDebug

instrumentationTests:
  stage: test
#  tags:
#    - android # tag with which our runner is started
  before_script:
    - echo y | android-sdk-linux/tools/bin/sdkmanager --install "system-images;android-${ANDROID_COMPILE_SDK};google_apis;x86" >/dev/null
    - echo no | android-sdk-linux/tools/bin/avdmanager -v create avd --force --name test --abi google_apis/x86 --package "system-images;android-${ANDROID_COMPILE_SDK};google_apis;x86"
    - export SHELL=/bin/bash && echo "no" | android-sdk-linux/emulator/emulator -avd test -no-audio -no-window -gpu off -verbose -qemu &
    - android-sdk-linux/platform-tools/adb wait-for-device
#    - android-wait-for-emulator
    - sleep 60
#    - export TERM=${TERM:-dumb}
#    - export ADB_INSTALL_TIMEOUT=4 # minutes (2 minutes by default)
#  image: shepeliev/android-sdk
  script:
#    - /opt/start-default-emulator.sh
    # Turn off animation
    - android-sdk-linux/platform-tools/adb shell settings put global window_animation_scale 0
    - android-sdk-linux/platform-tools/adb shell settings put global transition_animation_scale 0
    - android-sdk-linux/platform-tools/adb shell settings put global animator_duration_scale 0
    # Turn off google auto-fill
    - android-sdk-linux/platform-tools/adb shell settings put secure autofill_service null
#    - adb shell input keyevent 82
    - ./gradlew cAT
#    - ./gradlew createDebugCoverageReport
#    - cat "app/build/reports/coverage/debug/index.html"
#  only:
#    - /^master$/
  artifacts:
    name: "tests-instrumentation-${CI_BUILD_NAME}"
    expire_in: 1 week
    paths:
      - app/build/reports/

after_script:
  - echo "End CI"